# -*- coding: utf-8 -*-
"""NLP Project Data Prep.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UF6DEqoVndV7J7G1d1oysuVkSZSpg1S9
"""

import numpy as np
import pandas as pd
import os
import warnings
import math
import matplotlib.pyplot as plt
import re
warnings.filterwarnings('ignore')
dataset = pd.ExcelFile("newDataset.xlsx")
dataset2 = pd.ExcelFile("TrumpTweetTrain.xlsx")
dataset3 = pd.ExcelFile("TrumpTweetTest.xlsx")

crude = pd.read_excel(dataset, sheet_name = "Crude", skiprows = 2)
gold = pd.read_excel(dataset, sheet_name = "Gold", skiprows = 2)
idx = pd.read_excel(dataset, sheet_name = "Dollar Index", skiprows = 2)
carry_crude = pd.read_excel(dataset, sheet_name = "Shift_Crude", skiprows = 2)
carry_gold = pd.read_excel(dataset, sheet_name = "Shift_Gold", skiprows = 2)
twt_train = pd.read_excel(dataset2, sheet_name = "Sheet1")
twt_test= pd.read_excel(dataset3, sheet_name = "Sheet1")

# Merge the futures prices on time
def CustomMerge(df1, df2, collst):
    left = 0
    right = 0
    result = []
    while left < len(df1) or right < len(df2):
        temp = []
        if left == len(df1):
            for i in range(right, len(df2)):
                temp = [df2.iloc[i,0]]
                for j in range(1, len(df1.iloc[0])):
                    temp.append(np.nan)
                for j in range(1, len(df2.iloc[i])):
                    temp.append(df2.iloc[i,j])
                result.append(temp)
            right = len(df2)
        elif right == len(df2):
            for i in range(left, len(df1)):
                temp = [df1.iloc[i, 0]]
                for j in range(1, len(df1.iloc[0])):
                    temp.append(df1.iloc[i, j])
                for j in range(1, len(df2.iloc[0])):
                    temp.append(np.nan)
                result.append(temp)
            left = len(df1)
        else:
            if df1.iloc[left,0] < df2.iloc[right,0]:
                temp.append(df1.iloc[left,0])
                for i in range(1, len(df1.iloc[left])):
                    temp.append(df1.iloc[left, i])
                for i in range(len(df2.iloc[right])-1):
                    temp.append(np.nan)
                left += 1
            elif df1.iloc[left,0] == df2.iloc[right,0]:
                temp.append(df1.iloc[left,0])
                for i in range(1, len(df1.iloc[left])):
                    temp.append(df1.iloc[left, i])
                for i in range(1, len(df2.iloc[right])):
                    temp.append(df2.iloc[right, i])
                left += 1
                right += 1
            elif df1.iloc[left, 0] > df2.iloc[right,0]:
                temp.append(df2.iloc[right,0])
                for i in range(1, len(df1.iloc[left])):
                    temp.append(np.nan)
                for i in range(1, len(df2.iloc[right])):
                    temp.append(df2.iloc[right,i])
                right += 1
            result.append(temp)
    result = pd.DataFrame(result)
    result.columns = collst
    return result

# Panel data for all constracts
def ConstructPanel(df):
    result = pd.DataFrame()
    columnList = []
    for i in range(int((len(df.iloc[0]) + 1)/4)):
        df_temp = df.iloc[:, i * 4:i * 4 + 3]
        df_temp = df_temp.iloc[2:]
        temp_i = 0
        while type(df_temp.iloc[temp_i, 0]) == type(df_temp.iloc[temp_i + 1, 0]) and temp_i < len(df_temp) - 2:
            temp_i += 1
        df_temp = df_temp.iloc[: temp_i + 1]
        if i == 0:
            result = df_temp
            columnList = ['Time', df_temp.columns[0] + ' Price', df_temp.columns[0] + ' Volume']
        else:
            columnList = columnList + [df_temp.columns[0] + ' Price', df_temp.columns[0] + ' Volume']
            result = CustomMerge(result, df_temp, columnList)
    return result

# Label the dollar index
def labelDxy(df, collst):
    result = []
    exact = 0
    one_minute = df.iloc[2, 0] - df.iloc[1 ,0]
    for i in range(1, len(df) - 720):
        temp = []
        temp.append(df.iloc[i,0])
        for k in [5, 30, 720]:
          if df.iloc[i+k, 0] - df.iloc[i, 0] == k * one_minute:
            temp.append(label(df.iloc[i+k, 1] - df.iloc[i, 1]))
          else:
            exact = findMissing(df, i, i+k, k * one_minute)
            temp.append(label(df.iloc[exact, 1] - df.iloc[i, 1]))
        result.append(temp)
    result = pd.DataFrame(result)
    result.columns = collst
    return result

# find the proper label
def label(diff):
    if diff > 0:
        return 1
    elif diff == 0:
        return 0
    else:
        return -1

label_idx = labelDxy(idx, ['Time', '5 Minutes', '30 Minutes', '12 Hours'])
#label_idx.to_csv('labeledUSDIDX.csv', index = False, header = True)
crudecombined = ConstructPanel(crude)
goldcombined = ConstructPanel(gold)
#crudecombined.to_csv('crude_combined.csv', index = False, header = True)
#goldcombined.to_csv('gold_combined.csv', index = False, header = True)

# Find the most active contract
def findMain(df):
  result = []
  point = 1
  found = 0
  for i in range(3, len(df)):
    temp = [df.iloc[i, 0]]
    if point < len(df.iloc[i]) - 2:
      temp_point = point + 2
      found = 0
      while temp_point < len(df.iloc[i]) and found == 0:
        if np.isnan(df.iloc[i, temp_point+1]) == False:
          if df.iloc[i, temp_point+1] > df.iloc[i, point+1] and df.iloc[i+1, temp_point+1] > df.iloc[i+1, point+1]:
            found = 1
            point = temp_point
            temp.append(df.iloc[0, point])
          else:
            temp_point += 2
        else:
          temp_point += 2
    if found == 0:
      temp.append(df.iloc[0,point])
    result.append(temp)
  result = pd.DataFrame(result)
  result.columns = ['Time', 'Contract Name']
  return result

crude_contracts = findMain(carry_crude)
gold_contracts = findMain(carry_gold)
#crude_contracts.to_csv('main_crude.csv', index = False, header = True)
#gold_contracts.to_csv('main_gold.csv', index = False, header = True)

# Label Crude Oil and Gold futures
def labelCLGC(df1, df2, collst):
  result = []
  point = 0
  exact = 0
  one_minute = df1.iloc[1,0] - df1.iloc[0,0]
  while df2.iloc[point, 0].day != df1.iloc[0,0].day:
    point += 1
  for i in range(len(df1) - 720):
    temp = [df1.iloc[i, 0]]
    if df2.iloc[point, 0].day != df1.iloc[i,0].day and df2.iloc[point, 0] < df1.iloc[i, 0]:
      point += 1
    if df1.iloc[i, 0] + 5 * one_minute == df1.iloc[i+5, 0]:
      temp.append(label(df1[df2.iloc[point, 1] + ' Price'][i+5] - df1[df2.iloc[point, 1] + ' Price'][i]))
    else:
      exact = findMissing(df1, i, i+5, 5 * one_minute)
      temp.append(label(df1[df2.iloc[point, 1] + ' Price'][exact] - df1[df2.iloc[point, 1] + ' Price'][i]))
    if df1.iloc[i, 0] + 30 * one_minute == df1.iloc[i+30, 0]:
      temp.append(label(df1[df2.iloc[point, 1] + ' Price'][i+30] - df1[df2.iloc[point, 1] + ' Price'][i]))
    else:
      exact = findMissing(df1, i, i+30, 30 * one_minute)
      temp.append(label(df1[df2.iloc[point, 1] + ' Price'][exact] - df1[df2.iloc[point, 1] + ' Price'][i]))
    if df1.iloc[i, 0] + 720 * one_minute == df1.iloc[i+720, 0]:
      temp.append(label(df1[df2.iloc[point, 1] + ' Price'][i+720] - df1[df2.iloc[point, 1] + ' Price'][i]))
    else:
      exact = findMissing(df1, i, i+720, 720 * one_minute)
      temp.append(label(df1[df2.iloc[point, 1] + ' Price'][exact] - df1[df2.iloc[point, 1] + ' Price'][i]))
    result.append(temp)
  result = pd.DataFrame(result)
  result.columns = collst
  return result

# In case the price panel has missing entries
def findMissing(df, start, max, span):
  found = 0
  position = max
  while found == 0 and position > start:
    if df.iloc[position, 0] - df.iloc[start, 0] > span:
      position -= 1
    else:
      found = 1
  return position

label_crude = labelCLGC(crudecombined, crude_contracts, ['Time', '5 Minutes', '30 Minutes', '12 Hours'])
label_gold = labelCLGC(goldcombined, gold_contracts, ['Time', '5 Minutes', '30 Minutes', '12 Hours'])

output_label = label_crude
output_label = output_label.merge(label_gold, left_on = 'Time', right_on = 'Time')
output_label = output_label.merge(label_idx, left_on = 'Time', right_on = 'Time')
label_c = 'USD Index '
label_a = 'Crude Oil '
label_b = 'Gold '
label_d = '5 Minutes'
label_e = '30 Minutes'
label_f = '12 Hours'
output_label.columns = ['Time', label_a + label_d, label_a + label_e, label_a + label_f, \
                        label_b + label_d, label_b + label_e, label_b + label_f, \
                        label_c + label_d, label_c + label_e, label_c + label_f]

#output_label.to_csv('label.csv', index = False, header = True)

# preprocess tweets with regex
def processTweet(df):
  result = []
  for i in range(len(df)):
    text = df['text'][i]
    text = re.sub("RT @.*: ", "", text)
    text = re.sub("https://.* ", "", text)
    text = re.sub("https://.*(\s*)", "", text)
    text = re.sub("&amp; *", "", text)
    text = re.sub("&gt; *", "", text)
    text = re.sub(r'[^\x00-\x7f]',r' ',text)
    if text.strip() != "":
      temp = [df.iloc[i, 0].replace(second = 0)]
      temp.append(text.strip())
      for j in range(2, len(df.iloc[i])):
        temp.append(df.iloc[i, j])
      result.append(temp)
  result = pd.DataFrame(result)
  result.columns = df.columns
  return result

tweet_train = processTweet(twt_train)
tweet_test = processTweet(twt_test)

# match tweets with labels
def matchLabel(df1, df2):
  left = 0
  right = 0
  result = []
  while left < len(df1) and right < len(df2):
    temp = []
    if df1.iloc[left, 0] > df2.iloc[right, 0]:
      right += 1
    elif df1.iloc[left, 0] < df2.iloc[right, 0]:
      left += 1
    else:
      for i in range(1, len(df1.iloc[left])):
        temp.append(df1.iloc[left, i])
      for i in range(1, len(df2.iloc[right])):
        temp.append(df2.iloc[right, i])
      result.append(temp)
      left += 1
  result = pd.DataFrame(result)
  result.columns = df1.columns.to_list()[1:] + df2.columns.to_list()[1:]
  return result

trainingset = matchLabel(tweet_train, output_label)
testingset = matchLabel(tweet_test, output_label)
trainingset.to_csv('train.csv', index = False, header = True)
testingset.to_csv('test.csv', index = False, header = True)